package programmers.second;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Queue;public class Prg_250136 {	public static void main(String[] args) {		Prg_250136 sol = new Prg_250136();		System.out.println(sol.solution(			new int[][] {{1, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 0, 0}, {1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 0},				{1, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 0, 0}, {1, 1, 1, 1, 1, 1}}));	}	static int n, m;	private int solution(int[][] land) {		int answer = 0;		n = land.length;		m = land[0].length;		int[][] oil = new int[n][m];		int[] idx = new int[n*m +1];		int index = 1;		for(int i=0; i < m; i++){			List<Integer> idxList = new ArrayList<>();			int tmp = 0;			for(int j=0; j < n; j++){				if(land[j][i] == 0)					continue;				if( oil[j][i] != 0 && !idxList.contains(oil[j][i]) ){					tmp += idx[oil[j][i]];					idxList.add(oil[j][i]);				}				else if( oil[j][i] == 0 ){					idx[index] = bfs(j, i, oil, land, index);					idxList.add(index);					tmp += idx[index];					index++;				}			}			answer = Math.max(answer, tmp );		}		return answer;	}	private static int bfs(int x, int y, int[][] oil, int[][] land, int index){		Queue<int[]> q = new LinkedList<>();		q.add(new int[]{x,y});		int amount = 1;		oil[x][y] = index;		int[] dx = {1,0,-1,0};		int[] dy = {0,1,0,-1};		while(!q.isEmpty()){			int[] now = q.poll();			int nowX = now[0];			int nowY = now[1];			for(int d = 0; d < 4; d++){				int nx = nowX + dx[d];				int ny = nowY + dy[d];				if(nx < 0 || ny < 0 || nx >=n || ny >= m )					continue;				if(land[nx][ny] == 0 || oil[nx][ny] != 0)					continue;				oil[nx][ny] = index;				q.add(new int[]{nx,ny});				amount++;			}		}		return amount;	}}