package BOJ.samsung;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Arrays;import java.util.StringTokenizer;public class Boj_14499 {	static int[][] map ;	static int[] command;	static int[] dice = new int[6];	static int[] dx = {0,0,-1,1};	static int[] dy = {1,-1,0,0};	public static void main(String[] args) throws IOException {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st = new StringTokenizer(br.readLine());		int n = Integer.parseInt(st.nextToken());		int m = Integer.parseInt(st.nextToken());		map = new int[n][m];		int x = Integer.parseInt(st.nextToken());		int y = Integer.parseInt(st.nextToken());		int k = Integer.parseInt(st.nextToken());		command = new int[k];		// n 개의 줄에 지도에 쓰여 있는 수가 /// 북 -> 남		for (int i=0; i < n; i++){			st = new StringTokenizer(br.readLine());			for (int j =0;j < m; j++ ){				map[i][j] = Integer.parseInt(st.nextToken());			}		}		st = new StringTokenizer(br.readLine());		for (int i=0; i < k; i++){			command[i] = Integer.parseInt(st.nextToken());		}		StringBuilder sb = new StringBuilder();		for (int i=0; i < k; i++){			int com = command[i] -1;			int nx = x + dx[com];			int ny = y + dy[com];			if (nx < 0 || ny <0 || nx >= n || ny >= m )				continue;			moveDice(com);			System.out.println(Arrays.toString(dice));			if (map[nx][ny] == 0){				map[nx][ny] = dice[3];			}else{				dice[3] = map[nx][ny];				map[nx][ny] = 0;			}						sb.append(dice[1]).append("\n");			x = nx;			y = ny;		}		System.out.println(sb);	}	private static void moveDice(int command){		int tmp = 0;		switch (command){			case 0:				tmp = dice[5];				dice[5] = dice[1];				dice[1] = dice[4];				dice[4] = dice[3];				dice[3] = tmp;				break;			case 1:				tmp = dice[5];				dice[5] = dice[3];				dice[3] = dice[4];				dice[4] = dice[1];				dice[1] = tmp;				break;			case 2:				tmp = dice[0];				dice[0] = dice[3];				dice[3] = dice[2];				dice[2] = dice[1];				dice[1] = tmp;				break;			case 3:				tmp = dice[0];				dice[0] = dice[1];				dice[1] = dice[2];				dice[2] = dice[3];				dice[3] = tmp;				break;		}	}}