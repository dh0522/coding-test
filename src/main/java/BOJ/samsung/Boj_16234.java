package BOJ.samsung;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.lang.reflect.Array;import java.util.ArrayList;import java.util.Arrays;import java.util.LinkedList;import java.util.List;import java.util.Queue;import java.util.StringTokenizer;public class Boj_16234 {	static int n, l, r;	static int[][] people;	static int[][] tmpPeople;	public static void main(String[] args) throws IOException {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st = new StringTokenizer(br.readLine());		n = Integer.parseInt(st.nextToken());		l = Integer.parseInt(st.nextToken());		r = Integer.parseInt(st.nextToken());		people = new int[n][n];		tmpPeople = new int[n][n];		for (int i = 0; i < n; i++){			st = new StringTokenizer(br.readLine());			for (int j = 0; j < n; j++){				people[i][j] = Integer.parseInt(st.nextToken());				tmpPeople[i][j] = people[i][j];			}		}		int answer = 0;		while(true){			int cnt = 0;			boolean[][] check = new boolean[n][n];			for (int i=0; i < n; i++){				for (int j = 0; j < n; j++){					if (!check[i][j]) {						cnt += borderLine(check, i, j);					}				}			}			if (cnt == 0)				break;			for (int i = 0; i < n; i++){				people[i] = tmpPeople[i].clone();			}			answer++;		}		System.out.println(answer);	}	private static int borderLine(boolean[][] check, int x, int y){		int[] dx = {1,0,-1,0};		int[] dy = {0,1,0,-1};		Queue<int[]> q = new LinkedList<>();		List<int[]> list = new ArrayList<>();		int sum = people[x][y];		check[x][y] = true;		q.add(new int[] {x,y});		list.add( new int[]{x,y});		while(!q.isEmpty()){			int[] now = q.poll();			for (int d = 0; d < 4; d++){				int nx = now[0] + dx[d];				int ny = now[1] + dy[d];				if (nx < 0 | ny < 0 || nx >= n || ny >= n)					continue;				if (check[nx][ny])					continue;				int diff = Math.abs(people[now[0]][now[1]]-people[nx][ny]);								if ( l <= diff && diff <= r){					check[nx][ny] = true;					sum += people[nx][ny];					q.add(new int[]{nx,ny});					list.add(new int[]{nx,ny});				}			}		}		if (list.size() == 1)			return 0;		int num = sum/list.size();		for (int i = 0; i <list.size(); i ++){			x = list.get(i)[0];			y = list.get(i)[1];			tmpPeople[x][y] = num;		}		return 1;	}}